(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jsonToCode = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const minQuote = require("min-quote");

const declareVars = ({ vars, comment=false, language="JavaScript", pretty, semi }) => {
  language = language.toUpperCase();
  let lang;
  if (language === "JS" || language === "JAVASCRIPT") lang = "JS";
  else if (language === "PY" || language === "PYTHON") lang = "PY";

  if (semi === undefined) {
    if (lang === "JS") semi = true;
    else if (lang === "PY") semi = false;
  }

  if (pretty === undefined) {
    if (lang === "JS") pretty = false;
    else if (lang === "PY") pretty = true;
  }

  let out = "";
  if (comment) {
    if (lang === "JS") out += "/* " + (typeof comment === "string" ? comment : "declarations") + " */\n";
    if (lang === "PY") out += "# " + (typeof comment === "string" ? comment : "declarations") + "\n";
  }
  if (!pretty && lang === "JS") out += "const ";
  vars.forEach(({ name, value, raw=false }, i) => {
    if (pretty) {
      if (i !== 0) out += "\n";
      out += (lang === "JS" ? "const " : "") + name + "=";
    } else {
      if (i !== 0) {
        if (lang === "JS") out += ",";
        else if (lang === "PY") out += ";";
      }
      out += name + "=";  
    }
    if (typeof value === "number" || raw) {
      out += value;
    } else if (typeof value === "string") {
      out += minQuote(value, { backtick: lang === "JS" });
    }
    if (pretty && semi) out += ";";
  });
  if (semi && !pretty) out += ";"
  return out;
};

module.exports = declareVars;

},{"min-quote":2}],2:[function(require,module,exports){
const minQuote = (str, { debug=false, backtick=true } = { backtick: false, debug: false }) => {
  if (debug) console.log("[min-quote] starting with str:", [str]);
  let quotechars = ["'", '"', "`"];
  let numQuotes = quotechars.length;
  let selection;
  for (let i = 0; i < numQuotes; i++) {
    const char = quotechars[i];
    if (!str.includes(char)) {
      selection = char;
      break;
    }
  }
  let result;
  if (selection) {
    result = selection + str + selection;
  } else {
    // chose the quote that would require the least amount of escaping
    const counts = { "'": 0, '"': 0, "`": 0 };
    for (let i = 0; i < str.length; i++) {
      const char = str[i];
      if (char === "'" || char === '"' || char === "`") {
        counts[char]++;
      }
    }
    if (debug) console.log("[min-quote] counts:", counts);
    const sortedCounts = Object.entries(counts).sort((a, b) => Math.sign(a[1] - b[1]));
    const minCount = sortedCounts[0][1];
    const candidates = sortedCounts.filter(([char, count]) => count === minCount);
    const notBackticks = candidates.filter(([char, count]) => char !== "`");
    if (notBackticks.length >= 1) selection = notBackticks[0][0];
    else selection = candidates[0][0];
    if (debug) console.log("[min-quote] selection:", selection);
    result = selection + str.replace(selection, "\\" + selection) + selection;
  }
  return result;
};

if (typeof module === "object") module.exports = minQuote;
if (typeof window === "object") window.minQuote = minQuote;
if (typeof self === "object") self.minQuote = minQuote;
},{}],3:[function(require,module,exports){
const { forEach } = require("advarr");
const count = require("deep-counter");
const declareVars = require("declare-vars");
const deconcat = require("deconcat");
const walk = require("deepest-walk");
const countNGrams = require("n-gram-counter");
const minQuote = require("min-quote");
const { genVarNames } = require("var-names");
const separo = require("separo");
const striptags = require("striptags");
const textops = require("textops");

const hasStuff = obj => Object.keys(obj).length > 0;

const isFlatArray = it => Array.isArray(it) && it.every(subitem => subitem === null || typeof subitem !== "object");

const isQuoted = str => str.match(/^(['"`]).*\1$/);

// remove wrapping braces
const unbrace = str => str.replace(/^\[/, "").replace(/\]$/);

const forEachFlatArray = (data, cb) => {
  walk({
    data,
    callback: ({ data, mod, type }) => {
      if (isFlatArray(data)) {
        cb({ data, mod, type });
      }
    }
  });
};

const forEachString = (data, cb) => {
  walk({
    data,
    callback: ({ data, mod, type }) => {
      if (typeof data === "string") {
        cb({ str: data, mod, type });
      }
    }
  });
};

// string in code
const toString = it => {
  if (it === null) return "null";
  else if (it === undefined) return "undefined";
  else if (typeof it === "string") return it;
  else if (typeof it === "number") return it.toString();
  else if (Array.isArray(it)) return JSON.stringify(it);
  else throw new Error("to-string failed because unexpected type");
};

const encode = ({ data, debug_level = 0, language = "JavaScript", max_passes = 100, prefix, read_only = true, spacer }) => {
  if (debug_level >= 1) console.log("[encode] starting");
  if (debug_level >= 2) console.log("[encode] data:", JSON.stringify(data).substring(0, 200), "...");

  // normalizing language
  language = language.toUpperCase();
  let lang;
  if (language === "JS" || language === "JAVASCRIPT") lang = "JS";
  else if (language === "PY" || language === "PYTHON") lang = "PY";

  if (prefix == undefined) {
    if (lang === "JS") prefix = "module.exports";
    else if (lang === "PY") prefix = "data";
  }

  const useBacktick = lang === "JS";

  const counts = count({ data, debug_level: debug_level - 1 });
  if (debug_level >= 1) console.log("counts:", counts);

  const stringified = typeof data === "string" ? data : JSON.stringify(data);
  if (debug_level >= 1) console.log("[encode] stringified:", stringified.substring(0, 200), "...");

  /* generate a UID for text operations */
  let uid;
  while (!uid) {
    const num = Math.floor(Math.random() * 1e5).toString();
    if (!stringified.includes(num)) uid = num;
  }
  if (debug_level >= 1) console.log("uid:", uid);

  // a number is always the first and last because there's not such thing as a sub-number (unlike a sub-string)
  const number_counts = Object.values(counts.numbers).map(it => ({
    type: "number",
    value: it.value,
    count: it.count
  }));

  const string_counts = Object.values(counts.strings).map(it => ({
    type: "string",
    value: it.value,
    count: it.count,
    first: it.first,
    last: it.last
  }));

  const all_counts = [...number_counts, ...string_counts];
  if (counts.null) {
    all_counts.push({
      type: "null",
      value: null,
      count: counts.null
    });
  }
  if (counts.undefined) {
    all_counts.push({
      type: "undefined",
      value: undefined,
      count: counts.undefined
    });
  }

  const sorted_counts = all_counts.sort((a, b) => Math.sign(b.count - a.count));
  if (debug_level >= 1) console.log("[encode] sorted counts");
  if (debug_level >= 2) console.log("[encode] sorted_counts:", sorted_counts);

  const tokens = sorted_counts.map(it => {
    try {
      if (debug_level >= 2) console.log("it:", it);

      const { value, count, type } = it;

      const value_string = toString(value);

      if (["null", "number", "undefined"].includes(type)) {
        const value_length = value_string.length;
        const current_cost = count * value_length;
        const savings = {};
        for (let variable_length = 1; variable_length <= 5; variable_length++) {
          // like ,A=123; or ,Ba=null or ,Ab=undefined;
          const declaration_cost = 1 + variable_length + 1 + value_length;
          const replacement_cost = declaration_cost + count * variable_length;
          savings[variable_length] = current_cost - replacement_cost;
        }
        return { value, count, savings };
      } else if (type === "string") {
        const { first, last } = it;
        const percent_start = first / count;
        const percent_end = last / count;
        const not_percent_start = 1 - percent_start;
        const not_percent_end = 1 - percent_end;

        // if it is always preceeded by a space, we will later prepend a " " space
        const pad = first === 0;
        if (debug_level >= 2) console.log("pad:", pad);

        // how many characters the current value takes up
        const value_length = `${pad ? " " : ""}${value_string}`.length;
        if (debug_level >= 2) console.log("value_length:", value_length);

        const current_cost = count * value_length;
        if (debug_level >= 2) console.log("current_cost:", current_cost);

        const savings = {};
        for (let variable_length = 1; variable_length <= 5; variable_length++) {
          // like ,A='+lon_0=105'
          let declaration_length = 1 + variable_length + 1 + 1 + value_length + 1;

          // not factoring in that strings can be keys as well
          // will need to upgrade deep-counter to track additional stats like is the string a complete key, is the string part of a key and position, and is string a substring in a string
          // also need to factor in whether to prepend space or not
          // ?? maybe should factor in assuming strings are replaced before and after with variables ??
          const average_replacement_length = `"+`.length * not_percent_start + variable_length + `"+`.length * not_percent_end;
          // console.log("average_replacement_length:", average_replacement_length);

          const total_replacement_size = declaration_length + average_replacement_length * count;
          if (debug_level >= 3) console.log("total_replacement_size:", total_replacement_size);
          savings[variable_length] = current_cost - total_replacement_size;
        }
        if (debug_level >= 2) console.log("savings:", savings);
        return {
          value: (pad ? " " : "") + it.value,
          count: count,
          first,
          last,
          pad,
          savings
        };
      }
    } catch (error) {
      throw error;
    }
  });
  if (debug_level >= 1) console.log(tokens);

  const skipVarNames = new Set();
  if (lang === "PY") {
    ["and", "as", "is", "or", "null"].forEach(skipword => {
      skipVarNames.add(skipword);
    });
  }

  const varname2token = new Map();
  const token2varname = new Map();

  const gen = genVarNames();
  for (const varname of gen) {
    if (debug_level >= 2) console.log("varname:", varname);
    if (skipVarNames.has(varname)) continue;

    const varlen = varname.length;

    // sort tokens by saving for the given variable's length
    tokens.sort((a, b) => Math.sign(b.savings[varlen] - a.savings[varlen]));

    // pop out the first token
    const token = tokens.shift();

    // if we can save any space with the token with the most potential savings, break
    if (token.savings[varlen] <= 0) break;

    // console.log("token:", token);
    // save the selection

    varname2token.set(varname, { first: token.first, token: token.value });
    token2varname.set(token.value, { varname, first: token.first, value: token.value });
  }
  if (debug_level >= 1) console.log("assigned variable names to tokens");
  if (debug_level >= 2) console.log("token2name:", token2varname);

  // console.log("varname2token['U']:", varname2token['U']);

  // get a clone of the original data
  const result = JSON.parse(stringified);
  if (debug_level >= 1) console.log("cloned original data");
  if (debug_level >= 2) console.log("cloned data:", result);

  const delprevchar = `<delprevchar-${uid}>`;
  const delnextchar = `<delnextchar-${uid}>`;

  // is the string an expression for an object key
  // like [a+b+c] in { [a+b+c]: value }
  const isObjKeyExprFn = ({ str, type }) => {
    return type === "object-key-string" && str.startsWith(delprevchar + "[") && str.endsWith(delnextchar + "]");
  };

  const lookup = x => {
    let varname;
    let varvalue;
    if (token2varname.has(x)) {
      varname = token2varname.get(x).varname;
      varvalue = x;
    } else if (typeof x === "string") {
      if (x.startsWith(" ") && token2varname.has(x.substr(1))) {
        varname = token2varname.get(x.substr(1)).varname;
        varvalue = x.substr(1);
      } else if (!x.startsWith(" ") && token2varname.get(" " + x)) {
        varname = token2varname.get(" " + x).varname;
        varvalue = " " + x;
      }
    }
    return { varname, varvalue };
  };

  const getVarOut = ({ it, varname, varvalue }) => {
    if (typeof it === "string") {
      if (it.startsWith(" ")) {
        if (varvalue.startsWith(" ")) {
          return varname;
        } else {
          return `" "+${varname}`;
        }
      } else if (varvalue.startsWith(" ")) {
        if (lang === "JS") {
          return `${varname}.trim()`;
        } else {
          return `${varnamme}.strip()`;
        }
      }
    }
    return varname;
  };

  const unescp = str =>
    str.replaceAll('"', (match, offset, string) => {
      const before = string.substring(0, offset);
      if (before.endsWith(delnextchar)) return '"';
      else return delnextchar + '"';
    });

  const getExpr = it => {
    const { varname, varvalue } = lookup(it);
    if (varname) return getVarOut({ it, varname, varvalue });
  };

  if (debug_level >= 1) console.log("starting walk");

  // first replacement pass
  // walk through whole object and replace substring and numbers with variables
  walk({
    data: result,
    callback: ({ data: it, mod, type: dataType }) => {
      try {
        if (debug_level >= 2) console.log("walking", { it, dataType });
        if (typeof it === "number") {
          const { varname } = lookup(it);
          if (varname) mod(delprevchar + varname + delnextchar);
        } else if (typeof it === "undefined") {
          const expr = getExpr(it);
          if (expr) mod(delprevchar + expr + delnextchar);
          else mod(delprevchar + "undefined" + delnextchar);
        } else if (it === null) {
          const expr = getExpr(it);
          if (expr) mod(delprevchar + expr + delnextchar);
          else mod(delprevchar + "null" + delnextchar);
        } else if (typeof it === "string") {
          if (["object-key-string", "object-value-string", "array-item-string"].includes(dataType)) {
            const words = separo(it, " ", { attachSep: true }).map(word => {
              const expr = getExpr(word);
              if (expr) return { expr };
              else return { quoted: minQuote(word, { backtick: useBacktick }) };
            });
            if (words.some(word => word.expr)) {
              let modStr = delprevchar;
              if (dataType === "object-key-string" && lang === "JS") modStr += "[";
              forEach(words, ({ it: word, prev, first: firstWord }) => {
                if (word.expr) {
                  if (!firstWord) modStr += "+";
                  modStr += word.expr;
                } else {
                  // current word and previous word use the same quotes
                  if (word.quoted[0] === prev?.quoted?.[0]) {
                    modStr = modStr.slice(0, -1) + word.quoted.slice(1);
                  } else {
                    // 2 strings in a row that share different quotes
                    if (!firstWord) modStr += "+";
                    modStr += word.quoted;
                  }
                }
              });
              if (dataType === "object-key-string" && lang === "JS") modStr += "]";
              modStr += delnextchar;
              mod(unescp(modStr));
            } else {
              mod(delprevchar + unescp(minQuote(it, { backtick: useBacktick })) + delnextchar);
            }
          } else {
            console.log("[json-to-code] it:", { it, dataType });
            throw new Error("unexpected dataType:", dataType);
          }
        }
      } catch (error) {
        console.error("walking error", error);
        throw error;
      }
    }
  });

  /*
    Array to hold variables created from the concatenation of other vars
    For example A=B+C
    And the order is important
  */

  const usedVarNames = new Set(varname2token.keys());
  const all_substitutions = [];
  let pass = 1; // count previous pass for unigrams
  while (pass < max_passes) {
    // holds whether anything changed
    let changed = false;

    // repeat trying to recursively compress bigrams
    // until can't save any more space
    while (pass < max_passes) {
      if (debug_level >= 1) console.log("checking bigram saving opportunities");
      // increment pass now because might break early later if no potential savings
      pass++;

      const substitutions = {};

      // get an array of new varnames of all the same length (i.e. cost)
      const varnames = [];
      let varlen;
      const varNameGen = genVarNames();
      for (const varname of varNameGen) {
        if (usedVarNames.has(varname)) continue;
        if (skipVarNames.has(varname)) continue;
        if (!varlen) varlen = varname.length;
        if (varname.length !== varlen) break;
        varnames.push(varname);
      }
      if (debug_level >= 2) console.log(`${varnames.length} possible varnames with length ${varlen}`);

      // object with
      // key: JSON of bigram array
      // value: raw number count
      const bigram_count = {};

      // we already replaced numbers, nulls, and undefineds in the first pass
      // so we can just focus on strings
      forEachString(result, leaf => {
        let { str } = leaf;

        // remove any text operations like delprevchar and delnextchar
        // assuming text ops are only at the beginning and the end
        // is that a good assumption?
        str = striptags(str);

        // remove wrapping straight braces around variable object keys
        // like going from [a+b] to a+b
        if (isObjKeyExprFn(leaf)) str = unbrace(str);

        // from a+b to array of ["a", "b"]
        const parts = deconcat(str);

        // count sequential pairs
        const bigrams = countNGrams({ data: parts, n: 2 });

        for (let b = 0; b < bigrams.length; b++) {
          const [bigram, subcount] = bigrams[b];
          const [first, second] = bigram;

          // ignore bigrams that include raw strings
          // code currently only handles bigrams made up of 2 variables
          if (isQuoted(first) || isQuoted(second)) continue;

          // convert bigram array to JSON string representation
          const key = JSON.stringify(bigram);
          if (key in bigram_count) bigram_count[key] += subcount;
          else bigram_count[key] = subcount;
        }
      });

      const bigram_savings = [];
      Object.entries(bigram_count).forEach(([bigram, count]) => {
        // convert bigram key to actual array
        const bigram_array = JSON.parse(bigram);

        // bigram is like [ 'E', 'A' ]
        // get length of E+A or 3
        const len = bigram_array.join("+").length;

        // current character count of bigrams
        const current_cost = len * count;

        // declaration cost is , + variable + = + len
        const declaration_cost = 1 + varlen + 1 + len;

        // how many bytes bigram would take up if replaced with a variable
        const replacement_cost = declaration_cost + varlen * count;

        // how many bytes we would save if we replaced a bigram with a variable
        const savings = current_cost - replacement_cost;

        // only care if actually save space
        if (savings > 0) bigram_savings.push([bigram, savings]);
      });

      // no more opportunities to save space
      // breaks out of only inner loop for bigrams
      if (bigram_savings.length === 0) break;

      // sort bigram savings array from smallest to largest savings
      bigram_savings.sort((a, b) => Math.sign(a[1] - b[1]));

      // console.log(`bigram_savings (${bigram_savings.length}) :`, bigram_savings.slice(0, 3));

      // iterate through varnames of the same length
      // assigning bigrams to the remaining names
      const bigram_to_varname = {};
      for (let v = 0; v < varnames.length; v++) {
        const varname = varnames[v];

        // pop off the last bigram which has the biggest savings
        const bigram = bigram_savings.pop()[0];

        // bigram is already JSON stringified
        bigram_to_varname[bigram] = varname;

        // no more bigrams to replace
        // seems we have more potential variable names
        // than actual replaceable bigrams
        if (bigram_savings.length === 0) break;
      }

      // walk through data and make substitutions
      forEachString(result, leaf => {
        let { str, mod, type } = leaf;

        const hasDelPrev = str.startsWith(delprevchar);
        const hasDelNext = str.endsWith(delnextchar);

        // remove text operations
        str = striptags(str);

        let isObjKeyExpr = isObjKeyExprFn(leaf);

        // remove wrapping straight braces around variable object keys
        // like going from [a+b] to a+b
        if (isObjKeyExpr) str = unbrace(str);

        // converts D+' +lat=39'+u+CO into ["D", "' +lat=39'", "u", "CO"], so can be combined again with +
        const parts = deconcat(str);

        // parts of string with variable substitution
        const swapped = [];

        let needToMod = false;
        if (parts.length === 1) {
          swapped.push(parts[0]);
        } else {
          // can only replace bigrams if have more than one gram
          for (let p = 1; p < parts.length; p++) {
            const prev = parts[p - 1];
            const curr = parts[p];
            const bigram = [prev, curr];
            const key = JSON.stringify(bigram);
            if (key in bigram_to_varname) {
              needToMod = true;
              if (type === "object-key-string") isObjKeyExpr = true;
              const varname = bigram_to_varname[key];
              swapped.push(varname);
              usedVarNames.add(varname);
              substitutions[key] = varname;
              p++; // skip checking the next bigram (because curr would be prev for that)

              // there's only one gram left, so we know that it won't be replaced
              if (p === parts.length - 1) swapped.push(parts[p]);
            } else {
              swapped.push(prev);
              if (p === parts.length - 1) swapped.push(curr);
            }
          }
        }

        const newStr = (hasDelPrev ? delprevchar : "") + (isObjKeyExpr ? "[" : "") + swapped.join("+") + (isObjKeyExpr ? "]" : "") + (hasDelNext ? delnextchar : "");

        if (needToMod) mod(unescp(newStr));
      });
      if (hasStuff(substitutions)) {
        changed = true;
        all_substitutions.push({ type: "bigram", data: substitutions });
      }
    }

    // done trying to save space via recursive bigrams,
    // so now try to find repeated arrays
    if (debug_level >= 2) console.log("checking array saving opportunities");
    while (pass < max_passes && read_only) {
      pass++;
      const substitutions = {};
      // get an array of new varnames of all the same length (i.e. cost)
      const varnames = [];
      let varlen;
      const varNameGen = genVarNames();
      for (const varname of varNameGen) {
        if (usedVarNames.has(varname)) continue;
        if (skipVarNames.has(varname)) continue;
        if (!varlen) varlen = varname.length;
        if (varname.length !== varlen) break;
        varnames.push(varname);
      }

      // read only output, so we can re-use repetitive flat arrays
      const arr_count = {};
      forEachFlatArray(result, ({ data }) => {
        let str = toString(data);

        // str includes any embedded text operations for the array

        if (arr_count[str] === undefined) arr_count[str] = 0; // initialize to zero if necessary
        arr_count[str]++;
      });

      const arr_savings = [];
      Object.entries(arr_count).forEach(([arr, count]) => {
        // run embedded text operations
        // cleans and removes <delprevchar> and <delnextchar>
        const { text } = textops.run({ text: arr, uid: Number(uid) });

        const len = text.length;
        const current_cost = len * count;

        // declaration cost is , + variable + = + len
        const declaration_cost = 1 + varlen + 1 + len;

        const replacement_cost = declaration_cost + varlen * count;
        const savings = current_cost - replacement_cost;

        // only care if actually save space
        if (savings > 0) arr_savings.push([arr, savings]);
      });

      if (arr_savings.length === 0) {
        if (debug_level >= 2) console.log("no more opportunities to save space");
        break;
      }

      // sort bigram savings array from smallest to largest savings
      arr_savings.sort((a, b) => Math.sign(a[1] - b[1]));

      const arr_to_varname = {};
      // const actual_arr_to_varname_passes = [];
      for (let v = 0; v < varnames.length; v++) {
        const varname = varnames[v];
        const [arr, savings] = arr_savings.pop();
        arr_to_varname[arr] = varname;
        if (arr_savings.length === 0) break;
      }
      if (arr_savings.length === 1) console.log({ arr_to_varname });

      forEachFlatArray(result, ({ data, mod }) => {
        const str = toString(data);
        // if array is not worth replacing
        if (str in arr_to_varname) {
          const varname = arr_to_varname[str];
          // replace array with "<delprevchar-uid>A<delnextchar-uid>"
          mod(delprevchar + varname + delnextchar);
          usedVarNames.add(varname);
          substitutions[str] = varname;
        }
      });

      if (hasStuff(substitutions)) {
        changed = true;
        all_substitutions.push({ type: "array", data: substitutions });
      }
    }

    // if couldn't find a way to compress any further, break
    if (!changed) {
      console.log(`breaking after ${pass} passes`);
      break;
    }
  }

  // console.log("all_substitutions:", all_substitutions[0]);

  let outcode = "";

  // add in null = "None"
  // for Python
  // because JSON.stringify will write in null values
  if (lang === "PY") {
    outcode += "# special handling for Python\nnull = None\nundefined = None\n";
  }

  // first declare the first variable replacements
  outcode += declareVars({
    comment: "pass 1",
    language: lang,
    vars: Array.from(varname2token.entries()).map(([name, { token }]) => {
      if (typeof token === "string") {
        return { name, value: token };
      } else if (token === null) {
        return { name, value: "null", raw: true };
      } else if (typeof token === "undefined") {
        return { name, value: "undefined", raw: true };
      } else if (typeof token === "number") {
        return { name, value: token.toString(), raw: true };
      }
    })
  });

  all_substitutions.forEach(({ type, data }, i) => {
    outcode += "\n\n";
    outcode += declareVars({
      comment: "pass " + (i + 2) + " (" + type + ")",
      language: lang,
      vars: Object.entries(data).map(([original, varname]) => {
        const value = type === "bigram" ? JSON.parse(original).join("+") : original;
        return {
          name: varname,

          // insert value directly into declaration code
          raw: true,

          value
        };
      })
    });
  });

  // process text operations for arrays
  ({ text: outcode } = textops.run({
    ops: ["delprevchar", "delnextchar"],
    text: outcode,
    uid: Number(uid)
  }));

  if (debug_level >= 2) console.log("[json-to-code] wrote all variable declarations");
  const resultString = JSON.stringify(result, undefined, spacer);
  if (debug_level >= 2) console.log("[json-to-code] stringified result");
  const { text: processedJSON } = textops.run({
    ops: ["delprevchar", "delnextchar"],
    text: resultString,
    uid: Number(uid)
  });
  if (debug_level >= 2) console.log("[json-to-code] ran final embedded text operations");

  outcode += "\n";
  outcode += `${prefix} = ${processedJSON};`;

  return { code: outcode };
};

module.exports = { encode };

},{"advarr":4,"declare-vars":1,"deconcat":5,"deep-counter":6,"deepest-walk":8,"min-quote":9,"n-gram-counter":10,"separo":12,"striptags":13,"textops":14,"var-names":15}],4:[function(require,module,exports){
const iter = ({ inpt, func, cb, thisArg }) => {
  try {
    const length = inpt.length;

    // shallow-copy origin array
    const originalArray = Array.from(inpt);

    const firstValue = originalArray[0];
    const lastValue = originalArray[length - 1];

    return inpt[func]((value, i, array) => {
      return cb({
        value,
        currentValue: value,
        element: value,
        item: value,
        it: value,

        firstValue,
        firstElement: firstValue,
        firstItem: firstValue,
        firstIt: firstValue,

        lastValue,
        lastElement: lastValue,
        lastItem: lastValue,
        lastIt: lastValue,

        i,
        index: i,

        array,

        get percent() { return (i + 1) / length; },

        get length() { return length; },

        get previous() { return originalArray[i - 1]; },
        get prev() { return originalArray[i - 1]; },

        get next() { return originalArray[i + 1]; },

        get before() { return originalArray.slice(0, i); },
        get after() { return originalArray.slice(i + 1); },

        brk: (n=1) => { throw `[advarr] breaking ${n}`; },

        // ordinal numbers
        first: i === 0,
        second: i === 1,
        third: i === 2,
        fourth: i === 3,
        fifth: i === 4,
        sixth: i === 5,
        seventh: i === 6,
        eigth: i === 7,
        ninth: i === 8,
        tenth: i === 9,

        last: i === length - 1,
        penultimate: i === length - 2,
        antepenultimate: i === length - 3,

        odd: i % 2 === 1,
        even: i % 2 === 0,
      });
    }, thisArg);
  } catch (error) {
    let msg = error.toString();
    if (!msg.includes("[advarr] breaking 1")) {
      if (msg.includes("[advarr] breaking")) {
        const n = parseInt(msg[msg.length - 1]);
        msg = "[advarr] breaking " + (n - 1);
      }
      throw msg;
    }
  }
};

const advarr = {};
["every", "filter", "find", "findIndex", "flatMap", "forEach", "map", "some"].forEach(key => {
  advarr[key] = (inpt, cb, thisArg) => iter({ inpt, func: key, cb, thisArg });
});

if (typeof module.exports === "object") module.exports = advarr;
if (typeof window === "object") window.advarr = advarr;
if (typeof self === "object") self.advarr = advarr;

},{}],5:[function(require,module,exports){
const deconcat = (str, debug) => {
  const tokens = [];
  let inString = false;
  let current = '';
  let quotechar = null;
  for (let i = 0; i < str.length; i++) {
    const char = str[i];
    if (debug) console.log("char:", char);
    if (char === "+") {
      if (inString) {
        current += char;
      } else if (current !== '') {
        tokens.push(current);
        current = "";
      }
    } else if (char === `'` || char === `"` || char === "`") {
      current += char;
      if (inString) {
        if (char === quotechar && str[i-1] !== "\\") inString = false;
      } else {
        inString = true;
        quotechar = char;
      }
    } else if (char === ` `) {
      if (inString) current += char;
    } else {
      current += char;
    }
  }
  if (current !== '') tokens.push(current);
  return tokens;
}

if (typeof module === "object") module.exports = deconcat;
if (typeof window === "object") window.deconcat = deconcat;
if (typeof self === "object") self.deconcat = deconcat;


},{}],6:[function(require,module,exports){
const { forEach } = require("advarr");

const merge = require("./merge-counts");

const count = (options) => {
  let {
    data,
    debug_level=0,
    count_numbers=true,
    count_strings=true,
    split_strings_on=" "
  } = options;

  if (debug_level >= 1) console.log("[deep-counter] options:", options);

  if (!('data' in options)) throw new Error("[deep-counter] you called count without a data property set")

  const results = {
    strings: {},
    numbers: {},
    null: 0,
    undefined: 0
  };

  if (Array.isArray(data)) {
    forEach(data, ({ value }) => {
      merge({
        from: count({ ...options, data: value }),
        into: results
      });
    });
  } else if (data === null) {
    results.null++;
  } else if (data === undefined) {
    results.undefined++;
  } else if (typeof data === "object") {
    merge({
      from: count({ ...options, data: Object.keys(data) }),
      into: results
    });
    merge({
      from: count({ ...options, data: Object.values(data) }),
      into: results
    });
  } else if (typeof data === "string") {
    if (count_strings) {
      const tokens = data.split(split_strings_on);
      forEach(tokens, ({ value: token, last, first }) => {    
        if (token in results.strings) {
          results.strings[token].count++;
        } else {
          results.strings[token] = {
            value: token,
            count: 1,
            first: 0,
            last: 0
          };
        }
        if (first) results.strings[token].first++
        if (last) results.strings[token].last++
      });
    }
  } else if (typeof data === "number") {
    if (count_numbers) {
      if (data in results.numbers) {
        results.numbers[data].count++;
      } else {
        results.numbers[data] = { count: 1, value: data };
      }
    }
  }
  return results;
};

module.exports = count;


},{"./merge-counts":7,"advarr":4}],7:[function(require,module,exports){
module.exports = ({ from, into }) => {
  Object.entries(from).forEach(([type, counts]) => {
    if (type in into) {
      if (typeof counts === "number") {
        into[type] += counts;
      } else {
        Object.entries(counts).forEach(([token, info]) => {
          // console.log("into:", into);
          // console.log("type:", type);
          if (token in into[type]) {
            // iterate over values if it's a number add it
            Object.entries(info).forEach(([key, count]) => {
              if (key !== "value") {
                // console.log({key, count});
                if (key in into[type][token]) {
                  into[type][token][key] += count;
                } else {
                  into[type][token][key] = count;
                }
              }
            });
          } else {
            into[type][token] = info;
          }
        });
      }
    } else {
      into[type] = counts;
    }
  });
};

},{}],8:[function(require,module,exports){
const { forEach, map } = require("advarr");
const replaceKey = require("replace-key");

// utility functions
const isAry = (it) => Array.isArray(it);
const isNul = (it) => it === null;
const isObj = (it) => !Array.isArray(it) && !isNul(it) && typeof it === "object";
const isStr = (it) => typeof it === "string";
const isNum = (it) => typeof it === "number";

// doing split strings on /(?= )/ splits "a cow jumped" to [ 'a', ' cow', ' jumped' ]
function walk({
  callback,
  data,
  debug = false,
  path = [],
  split_strings_on = null, // alternative is " " if you want to split on words
  include_sep = false, // defaults to including separator in beginging if exists
  max_path_length: m = Infinity,
  split_keys = undefined,
  types,
}) {
  // saving args to pass down
  let args = arguments[0];

  if (split_keys === undefined) {
    split_keys = split_strings_on !== undefined;
  }

  if (debug) console.log("starting walk with args", args);
  const hasPath = isAry(path) && path.length > 0;
  const isArrayItem = hasPath && isNum(path[0]) && isAry(path[1]);
  const isObjValue = hasPath && isStr(path[0]) && isObj(path[1]);

  const split_str = (str) =>
    map(str.split(split_strings_on), ({ it, first }) => (include_sep && !first ? split_strings_on : "") + it);
  const join_subs = (subs) => subs.join(include_sep ? "" : split_strings_on);

  if (!hasPath && isStr(data)) throw new Error("you must pass in an object or an array to start");

  const mod_parent = (value) => {
    if (path.length === 0) throw new Error("[deepest-walk] unable to modify the starting data in place");
    if (typeof path[0] === "number") {
      // path[0] is an index in an array
      path[1][path[0]] = value;
    } else if (typeof path[0] === "string") {
      // path[0] is a key in an object
      path[1][path[0]] = value;
    }
  };

  if (isAry(data)) {
    if (!types || types.includes("array")) {
      callback({
        type: "array",
        data,
        mod: mod_parent,
      });
    }
    data.forEach((item, i) => {
      if (isStr(item)) {
        if (!types || types.includes("array-item-string")) {
          callback({
            type: "array-item-string",
            data: item,
            mod: (new_item) => (data[i] = new_item),
          });
        }
        if (split_strings_on && (!types || types.includes("array-item-substring"))) {
          const subItems = split_str(item);
          forEach(subItems, ({ it: subItem, index: ii, next, prev, first: isFirstSubstr, last: isLastSubstr }) => {
            callback({
              type: "array-item-substring",
              data: subItem,
              mod: (newSubItem) => {
                subItems[ii] = newSubItem;
                data[i] = subItems.join(include_sep ? "" : split_strings_on);
              },
              path: [ii, item, data, ...path],
              next,
              prev,
              first: isFirstSubstr,
              last: isLastSubstr,
            });
          });
        }
      } else {
        walk({ ...args, data: item, path: [i, data, ...path].slice(0, m) });
      }
    });
  } else if (isObj(data)) {
    if (!types || types.includes("object")) {
      callback({
        type: "object",
        data,
        mod: mod_parent,
      });
    }
    Object.keys(data).forEach((key) => {
      if (!types || types.includes("object-key-string")) {
        callback({
          type: "object-key-string",
          data: key,
          mod: (new_key) => {
            replaceKey({ obj: data, old_key: key, new_key });
            key = new_key;
          },
        });
      }

      if (split_keys && split_strings_on && (!types || types.includes("object-key-substring"))) {
        const subKeys = split_str(key);
        forEach(subKeys, ({ it: subkey, i, first, last, prev, next }) => {
          const mod = (newSubKey) => {
            subKeys[i] = newSubKey;
            const new_key = join_subs(subKeys);
            replaceKey({ obj: data, old_key: key, new_key });
            key = new_key;
          };
          callback({
            type: "object-key-substring",
            data: subkey,
            mod,
            first,
            last,
            prev,
            next,
          });
        });
      }
      let value = data[key];
      if (debug) console.log("value:", value);
      if (isStr(value)) {
        if (!types || types.includes("object-value-string")) {
          callback({
            type: "object-value-string",
            data: value,
            mod: (newValue) => {
              data[key] = newValue;
              value = newValue;
            },
          });
        }
        if (split_strings_on && (!types || types.includes("object-value-substring"))) {
          const subValues = split_str(value);
          forEach(subValues, ({ it: subvalue, i }) => {
            const mod = (newSubValue) => {
              subValues[i] = newSubValue;
              data[key] = join_subs(subValues);
              subvalue = newSubValue;
            };
            callback({
              type: "object-value-substring",
              data: subvalue,
              mod,
            });
          });
        }
      } else {
        // walk value
        walk({ ...args, data: data[key], path: [key, data, ...path].slice(0, m) });
      }
    });
  } else if (data === undefined || data === null || typeof data === "number") {
    if (!hasPath) {
      const dataType =
        data === undefined ? "undefined" : data === null ? "null" : typeof data === "number" ? "number" : undefined;
      if (!types || types.includes(dataType)) {
        callback({
          data,
          type: dataType,
          mod: () => {
            throw new Error("unable to mod");
          },
        });
      }
    } else if (isArrayItem || isObjValue) {
      let type;
      if (data === undefined) type = "array-item-undefined";
      else if (data === null) type = "array-item-null";
      else if (typeof data === "number") type = "array-item-number";
      if (!types || types.includes(type)) {
        callback({
          data,
          type,
          mod: (new_value) => {
            path[1][path[0]] = new_value;
            value = new_value;
          },
        });
      }
    }
  }
}

module.exports = walk;

},{"advarr":4,"replace-key":11}],9:[function(require,module,exports){
arguments[4][2][0].apply(exports,arguments)
},{"dup":2}],10:[function(require,module,exports){
const count_array = ({ arr, debug, n }) => {
    const counts = {};
    if (debug) console.log("arr:", arr);
    for (let i = n; i <= arr.length; i++) {
        const ngram = arr.slice(i - n, i);
        if (debug) console.log("ngram:", ngram);
        if (counts.hasOwnProperty(ngram)) counts[ngram].count++;
        else counts[ngram] = { original: ngram, count: 1 };
    }
    if (debug) console.log("counts:", counts);
    const sorted = Object.entries(counts).sort((a, b) => Math.sign(b[1].count - a[1].count));
    if (debug) console.log("sorted:", sorted);
    const results = sorted.map(it => [it[1].original, it[1].count]);
    if (debug) console.log("results:", results);
    return results;
}

const count_text = ({ text, debug, n }) => {
    const counts = {};
    if (debug) console.log("text: " + text.substring(0, 100).trim() + "...");
    for (let i = n; i <= text.length; i++) {
        const ngram = text.substring(i - n, i);
        if (debug) console.log("ngram:", ngram);
        if (counts.hasOwnProperty(ngram)) counts[ngram]++;
        else counts[ngram] = 1;
    }
    if (debug) console.log("counts:", counts);
    const sorted = Object.entries(counts).sort((a, b) => Math.sign(b[1] - a[1]));
    if (debug) console.log("sorted:", sorted);
    return sorted;
}

module.exports = ({ data, debug, n }) => {
    if (Array.isArray(data)) {
        return count_array({ arr: data, debug, n });
    } else {
        return count_text({ text: data, debug, n });
    }
};

},{}],11:[function(require,module,exports){
const replaceKey = ({ obj, old_key, new_key }) => {
  if (obj === null || typeof obj !== "object") throw new Error(`[replace-key] obj is not an object"`);
  if (!(old_key in obj)) throw new Error(`[replace-key] "${old_key}" is not a key of obj`);
  obj[new_key] = obj[old_key];
  delete obj[old_key];
  return obj;
}

if (typeof module === "object") module.exports = replaceKey;
if (typeof window === "object") window.replaceKey = replaceKey;
if (typeof self === "object") self.replaceKey = replaceKey;

},{}],12:[function(require,module,exports){
const separo = (str, sep=' ', { attachSep=false, keepSep=false } = { attachSep: false, keepSep: false }) => {
  if (typeof sep === 'string') sep = new Set([sep]);
  else if (Array.isArray(sep)) sep = new Set(sep);

  const result = [];
  let current = '';
  for (let i = 0; i < str.length; i++) {
    const char = str[i];
    if (sep.has(char)) {
      result.push(current);
      if (attachSep) {
        current = char;
      } else if (keepSep) {
        result.push(char);
        current = '';
      } else {
        current = '';
      }
    } else {
      current += char;
    }
  }
  if (current.length > 0) result.push(current);

  return result;
};

if (typeof module === 'object') module.exports = separo;
if (typeof window === 'object') window.separo = separo;
if (typeof self === 'object') self.separo = separo;

},{}],13:[function(require,module,exports){
'use strict';

(function (global) {

    // minimal symbol polyfill for IE11 and others
    if (typeof Symbol !== 'function') {
        var Symbol = function(name) {
            return name;
        }

        Symbol.nonNative = true;
    }

    const STATE_PLAINTEXT = Symbol('plaintext');
    const STATE_HTML      = Symbol('html');
    const STATE_COMMENT   = Symbol('comment');

    const ALLOWED_TAGS_REGEX  = /<(\w*)>/g;
    const NORMALIZE_TAG_REGEX = /<\/?([^\s\/>]+)/;

    function striptags(html, allowable_tags, tag_replacement) {
        html            = html || '';
        allowable_tags  = allowable_tags || [];
        tag_replacement = tag_replacement || '';

        let context = init_context(allowable_tags, tag_replacement);

        return striptags_internal(html, context);
    }

    function init_striptags_stream(allowable_tags, tag_replacement) {
        allowable_tags  = allowable_tags || [];
        tag_replacement = tag_replacement || '';

        let context = init_context(allowable_tags, tag_replacement);

        return function striptags_stream(html) {
            return striptags_internal(html || '', context);
        };
    }

    striptags.init_streaming_mode = init_striptags_stream;

    function init_context(allowable_tags, tag_replacement) {
        allowable_tags = parse_allowable_tags(allowable_tags);

        return {
            allowable_tags : allowable_tags,
            tag_replacement: tag_replacement,

            state         : STATE_PLAINTEXT,
            tag_buffer    : '',
            depth         : 0,
            in_quote_char : ''
        };
    }

    function striptags_internal(html, context) {
        if (typeof html != "string") {
            throw new TypeError("'html' parameter must be a string");
        }

        let allowable_tags  = context.allowable_tags;
        let tag_replacement = context.tag_replacement;

        let state         = context.state;
        let tag_buffer    = context.tag_buffer;
        let depth         = context.depth;
        let in_quote_char = context.in_quote_char;
        let output        = '';

        for (let idx = 0, length = html.length; idx < length; idx++) {
            let char = html[idx];

            if (state === STATE_PLAINTEXT) {
                switch (char) {
                    case '<':
                        state       = STATE_HTML;
                        tag_buffer += char;
                        break;

                    default:
                        output += char;
                        break;
                }
            }

            else if (state === STATE_HTML) {
                switch (char) {
                    case '<':
                        // ignore '<' if inside a quote
                        if (in_quote_char) {
                            break;
                        }

                        // we're seeing a nested '<'
                        depth++;
                        break;

                    case '>':
                        // ignore '>' if inside a quote
                        if (in_quote_char) {
                            break;
                        }

                        // something like this is happening: '<<>>'
                        if (depth) {
                            depth--;

                            break;
                        }

                        // this is closing the tag in tag_buffer
                        in_quote_char = '';
                        state         = STATE_PLAINTEXT;
                        tag_buffer   += '>';

                        if (allowable_tags.has(normalize_tag(tag_buffer))) {
                            output += tag_buffer;
                        } else {
                            output += tag_replacement;
                        }

                        tag_buffer = '';
                        break;

                    case '"':
                    case '\'':
                        // catch both single and double quotes

                        if (char === in_quote_char) {
                            in_quote_char = '';
                        } else {
                            in_quote_char = in_quote_char || char;
                        }

                        tag_buffer += char;
                        break;

                    case '-':
                        if (tag_buffer === '<!-') {
                            state = STATE_COMMENT;
                        }

                        tag_buffer += char;
                        break;

                    case ' ':
                    case '\n':
                        if (tag_buffer === '<') {
                            state      = STATE_PLAINTEXT;
                            output    += '< ';
                            tag_buffer = '';

                            break;
                        }

                        tag_buffer += char;
                        break;

                    default:
                        tag_buffer += char;
                        break;
                }
            }

            else if (state === STATE_COMMENT) {
                switch (char) {
                    case '>':
                        if (tag_buffer.slice(-2) == '--') {
                            // close the comment
                            state = STATE_PLAINTEXT;
                        }

                        tag_buffer = '';
                        break;

                    default:
                        tag_buffer += char;
                        break;
                }
            }
        }

        // save the context for future iterations
        context.state         = state;
        context.tag_buffer    = tag_buffer;
        context.depth         = depth;
        context.in_quote_char = in_quote_char;

        return output;
    }

    function parse_allowable_tags(allowable_tags) {
        let tag_set = new Set();

        if (typeof allowable_tags === 'string') {
            let match;

            while ((match = ALLOWED_TAGS_REGEX.exec(allowable_tags))) {
                tag_set.add(match[1]);
            }
        }

        else if (!Symbol.nonNative &&
                 typeof allowable_tags[Symbol.iterator] === 'function') {

            tag_set = new Set(allowable_tags);
        }

        else if (typeof allowable_tags.forEach === 'function') {
            // IE11 compatible
            allowable_tags.forEach(tag_set.add, tag_set);
        }

        return tag_set;
    }

    function normalize_tag(tag_buffer) {
        let match = NORMALIZE_TAG_REGEX.exec(tag_buffer);

        return match ? match[1].toLowerCase() : null;
    }

    if (typeof define === 'function' && define.amd) {
        // AMD
        define(function module_factory() { return striptags; });
    }

    else if (typeof module === 'object' && module.exports) {
        // Node
        module.exports = striptags;
    }

    else {
        // Browser
        global.striptags = striptags;
    }
}(this));

},{}],14:[function(require,module,exports){
function Tag({ name, uid }) {
  return `<${name}${uid ? "-" + uid : ""}>`;
}

function run({ debug, ops, text, uid }) {
  if (!text) throw new Error("[textops] can't run without text!  Please call like run({ text })");
  if (!["number", "undefined"].includes(typeof uid)) throw new Error(`[textops] for security reasons, uid must be a number or undefined.  You passed in "${typeof uid}"`);
  if (typeof uid === "number" && uid.toString().includes(".")) throw new Error("[textops] for security reasons, uid must be an integer");
  ops ??= ["delprev", "delprevchar", "delnext", "delnextchar"];

  const anychar = ".";
  const op2re = {
    delprev: anychar + "+" + Tag({ name: "delprev", uid }),
    delnext: Tag({ name: "delnext", uid }) + anychar + "+",
    delprevchar: anychar + Tag({ name: "delprevchar", uid }),
    delnextchar: Tag({ name: "delnextchar", uid }) + anychar
  };

  const restr =
    "(" +
    ops
      .map(op => op2re[op])
      .filter(Boolean)
      .join("|") +
    ")";

  if (debug) console.log(`[textops] restr: "${restr}"`);
  const re = new RegExp(restr, "g");
  text = text.replace(re, "");

  return {
    text
  };
}

if (typeof define === "function") define(() => ({ run }));
if (typeof module === "object") module.exports = { run };
if (typeof window === "object") window.textops = { run };
if (typeof self === "object") self.textops = { run };

},{}],15:[function(require,module,exports){
const alphabet_lower = "abcdefghijklmnopqrstuvwxyz";
const alphabet_upper = alphabet_lower.toUpperCase();

const DEFAULT_CHARS = Array.from(alphabet_upper + alphabet_lower);

const DEFAULT_LANG = "JS";

const DEFAULT_MAX_COUNT = 1e6;

const RESERVED_WORDS = {
  // prettier-ignore
  JS: [
    "abstract", "alert", "all", "anchor", "anchors", "area", "arguments", "assign", "Array", "await",
    "boolean", "blur", "break", "button", "byte",
    "case", "catch", "char", "checkbox", "class", "clearInterval", "clearTimeout", "clientInformation", "close", "closed", "confirm", "const", "constructor", "continue", "crypto",
    "Date", "debugger", "decodeURI", "decodeURIComponent", "default", "defaultStatus", "delete", "do", "document", "double",
    "element", "elements", "else", "embed", "embeds", "encodeURI", "encodeURIComponent", "enum", "escape", "eval", "event", "export", "extends",
    "false", "fileUpload", "final", "finally", "float", "focus", "for", "form", "forms", "frame", "frameRate", "frames", "function",
    "getClass", "goto",
    "hasOwnProperty", "hidden", "history",
    "if", "image", "images", "implements", "import", "in", "Infinity", "innerHeight", "innerWidth", "instanceof", "int", "interface", "isFinite", "isNaN", "isPrototypeOf",
    "java", "javaClass", "JavaArray", "JavaObject", "JavaPackage",
    "layer", "layers", "length", "let", "link", "location", "long",
    "Math", "mimeTypes", "module",
    "name", "NaN", "native", "navigate", "navigator", "new", "null", "Number",
    "offscreenBuffering", "Object", "open", "opener", "option", "outerHeight", "outerWidth",
    "package", "packages", "pageXOffset", "pageYOffset", "parent", "parseFloat", "parseInt", "password", "pkcs11", "plugin", "private", "prompt", "propertyIsEnum", "protected", "prototype", "public",
    "radio", "reset", "return",
    "screenX", "screenY", "scroll", "secure", "select", "self", "setInterval", "setTimeout", "short", "static", "status", "String", "submit", "super", "switch", "synchronized",
    "text", "textarea", "this", "throw", "throws", "top", "toString", "transient", "true", "try", "typeof",
    "undefined", "unescape", "untaint",
    "valueOf", "var", "void", "volatile",
    "while", "with", "window",
    "yield"
  ],
};

function* genVarNames(
  {
    chars = DEFAULT_CHARS,
    debug = false,
    language = DEFAULT_LANG,
    max_count = DEFAULT_MAX_COUNT,
  } = {
    chars: DEFAULT_CHARS,
    debug: false,
    language: DEFAULT_LANG,
    max_count: DEFAULT_MAX_COUNT,
  }
) {
  const reserved_words = new Set(RESERVED_WORDS[language]);

  let count = 0;
  let indexes = [-1];
  let i = 0;

  while (true) {
    if (count === max_count) return;

    i++;

    if (indexes[indexes.length - 1] === chars.length - 1) {
      // reset at all A's
      // so increment the previous available character by one
      // so if AAZ go to ABA
      let reset_index = null;
      for (let ii = indexes.length - 2; ii >= 0; ii--) {
        if (indexes[ii] < chars.length - 2) {
          reset_index = ii;
          break;
        }
      }
      if (reset_index === null) {
        if (debug)
          console.log(
            "[var-names] adding a character and resetting to all A's"
          );
        indexes = indexes.map((n) => 0).concat([0]);
      } else {
        indexes[reset_index]++;
        for (let ii = reset_index + 1; ii < indexes.length; ii++) {
          indexes[ii] = 0;
        }
      }
    } else {
      indexes[indexes.length - 1]++;
    }
    const new_variable_name = indexes.map((ii) => chars[ii]).join("");
    if (reserved_words.has(new_variable_name)) {
      if (debug)
        console.log(
          "[var-names] skipping " +
            new_variable_name +
            "because it is a reserved word"
        );
      continue;
    }
    if (debug) console.log("[var-names] trying to eval new_variable_name");
    try {
      eval(`const ${new_variable_name} = "test";`);
      count++;
      yield new_variable_name;
    } catch (error) {
      if (debug) console.log("[var-names] can't use " + new_variable_name);
    }
  }
}

if (typeof module === "object") module.exports = { genVarNames };
if (typeof window === "object") window.varnames = { genVarNames };
if (typeof self === "object") self.varnames = { genVarNames };

},{}]},{},[3])(3)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
